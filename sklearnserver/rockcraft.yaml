# Based on https://github.com/SeldonIO/seldon-core/tree/master/servers/sklearnserver
# Based on https://github.com/SeldonIO/seldon-core/blob/v1.17.1/wrappers/s2i/python/Makefile
# Based on https://github.com/SeldonIO/seldon-core/blob/v1.17.1/wrappers/s2i/python/Dockerfile
# Based on https://github.com/SeldonIO/seldon-core/blob/v1.17.1/wrappers/s2i/python/Dockerfile.conda
name: sklearnserver
summary: An image for Seldon SKLearn Server
description: |
  This image is used as part of the Charmed Kubeflow product. The SKLearn Server serves
  models which have been stored as pickles.
version: 1.17.1
license: Apache-2.0
base: ubuntu@20.04
run-user: _daemon_
services:
  sklearnserver:
    override: replace
    summary: "sklearnserver service"
    startup: enabled
    # Yet again, use a subshell to jam conda into a working state. Can't use bashrc, because it immediately
    # exits if PS1 isn't set, so no-go from scripts.
    command: bash -c 'export PATH=/opt/conda/bin/:${PATH} && eval $(/opt/conda/bin/conda shell.bash hook 2> /dev/null) && source /opt/conda/etc/profile.d/conda.sh && conda activate && seldon-core-microservice ${MODEL_NAME} --service-type ${SERVICE_TYPE} &> /tmp/log.txt'
    working-dir: "/microservice"
    environment:
      # the following environment variables are taken from:
      # https://github.com/SeldonIO/seldon-core/blob/master/servers/sklearnserver/environment
      # NOTE: PERSISTENCE is omitted because it is depricated
      MODEL_NAME: "SKLearnServer"
      SERVICE_TYPE: "MODEL"
platforms:
  amd64:

parts:
  sklearnserver:
    plugin: nil
    source: https://github.com/SeldonIO/seldon-core
    source-type: git
    source-tag: v1.17.1
    override-stage: |
      export CONDA_DOWNLOAD_VERSION="py38_23.3.1-0"
      export CONDA_VERSION="23.5.0"
      curl -L -o certifi-python-certifi.tar.gz https://github.com/certifi/python-certifi/archive/master.tar.gz
      curl -L -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_DOWNLOAD_VERSION}-Linux-x86_64.sh
      bash ~/miniconda.sh -b -u -p opt/conda
      rm ~/miniconda.sh
      # Omit usage of conda-forge channel due to security reasons
      # since it is a community-maintained collection of packages.
      opt/conda/bin/conda install --yes conda=${CONDA_VERSION}
      opt/conda/bin/conda clean -tipy

      mkdir -p etc/profile.d
      ln -sf opt/conda/etc/profile.d/conda.sh etc/profile.d/conda.sh
      echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc
      echo "conda activate base" >> ~/.bashrc
      chgrp -R root opt/conda && chmod -R g+rw opt/conda
      # Skip the TINI part since this is the Entrypoint for the intermediate base image

      # Configure shell to use `conda activate`. `conda init` also requires a restart
      # of the shell afterwards. That's why we use a script to run the commands below
      bash -c "opt/conda/bin/conda init bash"

      # Use a heredoc to build a temporary script. This will start a new shell session.
      # Install requirements in conda environment (also installs seldon-core-microservice)
      cat >> ./build.sh <<EOF
      #!/usr/bin/bash
      # Make sure `rockcraft` will exit on script errors.
      set -e
      export PWD=$(pwd)
      export PATH=./opt/conda/bin:${PATH}
      eval $(/root/stage/opt/conda/bin/conda shell.bash hook 2> /dev/null)

      conda activate
      conda activate base
      cd /root/parts/sklearnserver/src/servers/sklearnserver/sklearnserver
      # Below version should match the source-tag
      sed -i 's/seldon_core/seldon_core == 1.16.0/g' requirements.txt
      pip install -r requirements.txt

      mkdir -p ${PWD}/microservice
      cp SKLearnServer.py ${PWD}/microservice/
      EOF

      bash ./build.sh
      rm build.sh

      # conda writes shebangs with its path everywhere, and in crafting, that will be, for example:
      # #!/root/stage/opt/conda/...
      #
      # Snip off the /root/stage part
      bash -c "grep -R -E '/root/stage' opt/ 2>/dev/null | grep -v Bin | awk '{split(\$0,out,\":\"); print out[1]}' | uniq | xargs -I{} sed -i -e 's/\/root\/stage//' {}"
    override-prime: |
      cp -rp ${CRAFT_STAGE}/opt opt/

      # seldon-core-microservice is a trivial wrapper which looks for .py|.exe files in pwd
      # and blindly executes them, as they should inherit. It doesn't need to be in /microservice,
      # but it does need to match pebble's workdir
      install -D -m 755 ${CRAFT_STAGE}/microservice/SKLearnServer.py microservice/SKLearnServer.py
      # We do not install seldon-core-microservice using `pip install .` like upstream
      # since we use the one installed in Conda environment during pip install -r requirements.txt

  security-team-requirement:
    plugin: nil
    after: [sklearnserver]
    override-build: |
      # security requirement
      # there are no packages installed in `bare` base which is used in this rock
      # `--root` option is not available in dpkg-query version which is packaged with 20.04
      mkdir -p ${CRAFT_PART_INSTALL}/usr/share/rocks
      (echo "# os-release" && cat /etc/os-release && echo "# dpkg-query") \
       > ${CRAFT_PART_INSTALL}/usr/share/rocks/dpkg.query
